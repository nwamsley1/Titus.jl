var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Titus","category":"page"},{"location":"#Titus","page":"Home","title":"Titus","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Titus.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Titus]","category":"page"},{"location":"#Titus.AA","page":"Home","title":"Titus.AA","text":"AA\n\nType that represents an amino acid\n\nFields\n\naa::Char – single character AA code \nmass::Float32 – mass of an amino acid\n\nExamples\n\nAA(aa::Char) – Inner constructor\n\n\n\n\n\n","category":"type"},{"location":"#Titus.Ion","page":"Home","title":"Titus.Ion","text":"Ion\n\nAbstract type that represents an ion \n\nTypes that inherit from Ion should implement the following. \n\ngetMZFeature(ion::Ion) = ion.mz\ngetMZ(ion::Ion) = getMZ(getMZFeature(ion))\ngetLow(ion::Ion) = getLow(getMZFeature(ion))\ngetHigh(ion::Ion) = getHigh(getMZFeature(ion))\ngetPrecID(ion::Ion) = ion.prec_id\ngetCharge(ion::Ion) = ion.charge\ngetIsotope(ion::Ion) = ion.isotope\n\n\n\n\n\n","category":"type"},{"location":"#Titus.Mod","page":"Home","title":"Titus.Mod","text":"Mod(mod::String, mods_dict::Dict{String, Float32})\n\nParses a string that is assumed to represent an amino acid and calculates its mass\n\nInput\n\nmod::String: – String representation of a potentially modified amino acid. Constructor enforces formatting. \nmods_dict – Dictionary for named modifications that could appear in mod\n\nOutput\n\nObject of type \"Mod\" with field mass::Float32 that represents the mass of the modification\n\nNotes\n\nAcceptable mod arguments match a regular expression defined in the method There can be three types of modifications. \n\nThere is no modification as in \"K\"\nThe mass is explicitly stated as in \"K[+8.014199]\"\nThe mass is named with a valid key for mods_dict as in \"C[Carb]\".\n\nIn this case mods_dict[\"Carb\"] should return the appropriate mass\n\n\n\n\n\n","category":"type"},{"location":"#Titus.Mod-2","page":"Home","title":"Titus.Mod","text":"MzFeature\n\nType that represents a mass modification\n\nFields\n\nmass:Float32 – mass of the modification\n\nExamples\n\nMod(mass::Float32) – default constructor\n`Mod(mod::String, mods_dict::Dict{String, Float32} = Dict{String, Float32}()) – Constructor \n\nthat parses a string representation of an amino acid to get the mass of any modification of that amino acid`\n\nMod(name::Char) = Mod(0.0) – constructor for unmodified AA\nMod() = Mod(0.0) – constructor for no input\n\n\n\n\n\n","category":"type"},{"location":"#Titus.MzFeature","page":"Home","title":"Titus.MzFeature","text":"MzFeature\n\nType that represents an m/z ratio with a ppm tolerance\n\nFields\n\nmono::Float32 – MZ with upper and lower bounds given a ppm tolerance\nlow::Float32 – Identifier of the precursor ion (parent ion of the fragment/transition)\nhigh::Float32 – Type of transition. For example 'b' for b ion or 'y' for y ion\n\nExamples\n\nMzFeature(mono::Float32; ppm::Float32 = Float32(20)) – default internal constructor\nMzFeature() = MzFeature(Float32(0.0)) – constructor for a default/placeholder MzFeature\n\nGetterMethods\n\ngetMZ(mzfeature::MzFeature) = mzfeature.mono\ngetLow(mzfeature::MzFeature) = mzfeature.low\ngetHigh(mzfeature::MzFeature) = mzfeature.high\n\n\n\n\n\n","category":"type"},{"location":"#Titus.Precursor","page":"Home","title":"Titus.Precursor","text":"Precursor(residues::Array{Residue, 1}, charge::Int32, isotope::Int32 = Int32(0), prec_id::Int32 = Int32(0), pep_id::Int32 = Int32(0))\n\nConstructor for the Precursor struct. Given a list of amino acid residues, a charge, and an isotope state, makes a precursor object with the correct mz.  (link to Precursor)\n\n\n\n\n\n","category":"type"},{"location":"#Titus.Precursor-2","page":"Home","title":"Titus.Precursor","text":"Precursor <: Ion\n\nType that represents a precursor (A peptide parent ion)\n\nFields\n\nresidues::Vector{Residue} – List of amino acid residues of the precursor in their appropriate order\nmz::MzFeature – MZ with upper and lower bounds given a ppm tolerance\nprec_id::UInt32 – Identifier of the precursor ion (parent ion of the fragment/transition)\ncharge::UInt8 – Charge of the fragment ion\nisotope::UInt8 – Difference in number of neutrons from the monoisotopic fragment \npep_id::UInt32 – Identifier of the peptide from which precursor is derived\n\nExamples\n\nPrecursor(residues::Vector{Residue}, mz::Float32, charge::UInt8,             isotope::UInt8,             pep_id::UInt32,            prec_id::UInt32;             ppm = Float32(20)) – default internal constructor\nPrecursor() – constructor for null/empty precursor\nPrecursor(residues::Vector{Residue}, charge::UInt8,             isotope::UInt8 = UInt8(0),             pep_id::UInt32 = UInt32(0),            prec_id::UInt32 = UInt32(0) – Constructor that calculates mz without having to supply it\nPrecursor(sequence::String; mods_dict::Dict{String, Float32} = Dict{String, Float32}(), charge::UInt8 = UInt8(2),             isotope::UInt8 = UInt8(0),             pep_id::UInt32 = UInt32(0),            prec_id::UInt32 = UInt32(0)) – Constructor that accepts a string representation of a peptide\n\nGetterMethods\n\ngetResidues(precursor::Precursor) = precursor.residues\n\n\n\n\n\n","category":"type"},{"location":"#Titus.Precursor-Tuple{String}","page":"Home","title":"Titus.Precursor","text":"Precursor(sequence::String, mods_dict::Dict{String, Float32}, charge::Int32, isotope::Int32 = Int32(0), prec_id::Int32 = Int32(0), pep_id::Int32 = Int32(0))\n\nAlternate constructor for the Precursor struct. Can accept a string representation of a peptide and a mods_dict  and convert to residues Array{Residue, 1}.  (link to Precusor)\n\n\n\n\n\n","category":"method"},{"location":"#Titus.Precursor-Tuple{}","page":"Home","title":"Titus.Precursor","text":"Precursor()\nConstructor for an \"empty\" or \"default\" precursor\n\n\n\n\n\n","category":"method"},{"location":"#Titus.Residue","page":"Home","title":"Titus.Residue","text":"Residue\n\nType that represents a (potentially modified) amino acid within a peptide\n\nFields\n\nmass:Float32 – mass of the amino acid\n\nExamples\n\nResidue(aa::AA) – default constructor\nResidue(aa::Char) = Residue(AA(aa))\nResidue(aa::AA, mod::Mod) = Residue(getMass(mod)+getMass(aa))\nResidue(residue::String, mods_dict::Dict{String, Float32}) = Residue(AA(residue[1]), Mod(residue, mods_dict))\nResidue(residue::String) = Residue(residue, Dict{String, Float32}())\nResidue(residue::String, mod_mass::Float32) = Residue(getMass(AA(residue[1])) + mod_mass)\nResidue(residue::Char, mod_mass::Float32) = Residue(getMass(AA(residue)) + mod_mass)\n\nGetter methods\n\ngetMass(residue::Residue) = residue.mass\n\nSee Also\n\ngetResidues(sequence::String,               mods_dict::Dict{String, Float32} = default_mods) – Gets a vector of residues given a string  representation of an amino acid sequence\n\n\n\n\n\n","category":"type"},{"location":"#Titus.Transition","page":"Home","title":"Titus.Transition","text":"Transition <: Ion\n\nType that represents transition (fragment ion of a peptide)\n\nFields\n\nmz::MzFeature – MZ with upper and lower bounds given a ppm tolerance\nprec_id::UInt32 – Identifier of the precursor ion (parent ion of the fragment/transition)\nion_type::Char  – Type of transition. For example 'b' for b ion or 'y' for y ion\nind::UInt8 – Position of fragment ion with reference to parent ion. (A b5+2 ion should have an ind equal to 5)\ncharge::UInt8 – Charge of the fragment ion\nisotope::UInt8 – Difference in number of neutrons from the monoisotopic fragment \n\nExamples\n\nTransition(frag_mz::Float32, prec_id::UInt32, ion_type::Char, ind::UInt8,              charge::UInt8,              isotope::UInt8;              ppm = Float32(20)) – default internal constructor\nTransition(residues::Vector{Residue}; ion_type::Char = 'y', charge::UInt8 = UInt8(1),              ind::UInt8 = UInt8(length(residues)),              isotope::UInt8 = UInt8(0),              prec_id::UInt32 = UInt32(0)) – constructor that calculates the appropriate mz\n\nGetterMethods\n\ngetIonType(transition::Transition) = transition.ion_type\ngetInd(transition::Transition) = transition.ind\n\n\n\n\n\n","category":"type"},{"location":"#Titus.Transition-Tuple{Vector{Residue}}","page":"Home","title":"Titus.Transition","text":"Transition(residues::Vector{Residue}; ion_type::Char = 'y', charge::UInt8 = UInt8(1), ind::UInt8 = UInt8(length(residues)), isotope::UInt8 = UInt8(0), prec_id::UInt32 = UInt32(0))\n\nConstructor for the `Transition` struct. Given a list of amino acid residues, ion type (b or y), charge state, and isotopic state makes a transition with the correct mz.\n\n\n\n\n\n","category":"method"},{"location":"#Titus.getBIonModifier-Tuple{UInt8}","page":"Home","title":"Titus.getBIonModifier","text":"getBIonModifier(charge::UInt8)\n\nMass modification that needs to be added to b-ions\n\n\n\n\n\n","category":"method"},{"location":"#Titus.getFragIons-Tuple{Vector{Residue}}","page":"Home","title":"Titus.getFragIons","text":"getFragIons(residues::Vector{Residue}; charge::UInt8 = UInt8(1), isotope::UInt8 = UInt8(0), y_start::Int = 3, b_start::Int = 3)\n\nUses calls to getIonSeries to concatenate both the b and y ion series together in a single Vector{Float32}\n\nInput\n\nresidues::Vector{Residue}: – List of amino acid residues in the peptide ion\ncharge::UInt8 – Charge of the fragment ions\nb_start::Int=3  – Index of first ion the the b-ion series to compute. \ny_start::Int=3  – Index of first ion the the y-ion series to compute. \nisotope::UInt8=UInt8(0) – Diference in the number of isotopes from the monoisotopic ion. \n\nOutput\n\nA Vector{Float32} wich each m/z in the ion series\n\nNotes\n\nThe modifier argument ought to depend on the kind of ion. For a 'b' ion series PROTON*charge is appropriate,\n\nbut for a 'y' ion series, PROTON*charge + H2O would be appropriate. \n\nWill not allow the index of the ion to be equal to or less than the charge. For example,\n\nb2+2 ions could only be calculated in error and are therefore excluded even if start  is set to 2. \n\nIf start exceeds length(residues)-1, then only the N-1 ion is calculated, that is,\n\nthe highest mass ion in the series. \n\nExamples\n\n#Gets the b3+1-b6+1 and y3+1-y6+1 ions\n\njulia> getFragIons(reverse(getResidues(\"PEPTIDE\")), b_start = 3, y_start = 3)\n8-element Vector{Float32}:\n 358.16083\n 459.2085\n 556.2612\n 685.30383\n 342.16595\n 443.21365\n 556.29767\n 671.3246\n\nSee Also\n\nAlternate convience methods\n\ngetFragIons(residues::Vector{Residue}; charge::UInt8 = UInt8(1),             isotope::UInt8 = UInt8(0),              y_start::Int = 3,              b_start::Int = 3) - Default method\ngetFragIons(precursor::Precursor; charge::UInt8 = UInt8(1),              isotope::UInt8 = UInt8(0),              y_start::Int = 3,              b_start::Int = 3) - Can supply a Precursor rather than a  Vector{Residues} input\ngetFragIons(precursor::Precursor,charges::Vector{UInt8},              isotopes::Vector{UInt8};              y_start::Int = 3,              b_start::Int = 3) - Gets b and y ion seriers for multiple charge and isotopic states\n\n\n\n\n\n","category":"method"},{"location":"#Titus.getIonMZ-Tuple{Vector{Residue}, Char, UInt8}","page":"Home","title":"Titus.getIonMZ","text":"getIonMZ(residues::Vector{Residue}, ion_type::Char, charge::UInt8; isotope::UInt8 = UInt8(0))\n\nAlternate getIonMZ method that chooses the correct mass modifier for 'b', 'y', and 'p' ions respectively. \n\nInput\n\n- `residues::Vector{Residue}`: -- List of amino acid residues in the peptide ion\n- `ion_type::Char` -- Type of fragment ion. Currently supports, 'b', 'y', and 'p'. \n- `charge::UInt8` -- Charge of the ion\n- `isotope::UInt8=UInt8(0)` -- Diference in the number of isotopes from the monoisotopic ion.\n\nNotes\n\nSee main method\n    getIonMZ(residues::Vector{Residue}, charge::UInt8; modifier::Float32 = PROTON*charge + H2O, isotope::UInt8 = UInt8(0))\nfor more details\n\n\n\n\n\n","category":"method"},{"location":"#Titus.getIonMZ-Tuple{Vector{Residue}, UInt8}","page":"Home","title":"Titus.getIonMZ","text":"getIonMZ(residues::Vector{Residue}, charge::UInt8; modifier::Float32 = PROTON*charge + H2O, isotope::UInt8 = UInt8(0))::Float32\n\nGet the mz ratio of an ion\n\nInput\n\nresidues::Vector{Residue}: – List of amino acid residues in the peptide ion\ncharge::UInt8 – Charge of the ion\nmodifier::Float32=PROTON*charge + H2O – Added to the mass of the ion\nisotope::UInt8=UInt8(0) – Diference in the number of isotopes from the monoisotopic ion. \n\nOutput\n\nA Float32 representing the mass-to-charge ratio (m/z) of an ion\n\nNotes\n\nThe modifier argument ought to depend on the kind of ion. For B ions PROTONcharge is appropriate, but for 'y' or precursor ions, PROTONcharge + H2O would be appropriate.\n\nAlgorithm\n\nSum the amino acid residue masses, add modifier + isotope*NEUTRON and then divide the total by the charge. \n\nExamples\n\n#Gets the b6+1 ion MZ\n\njulia> getIonMZ(getResidues(\"PEPTIDE\")[1:6], UInt8(1), modifier = PROTON)\n653.314f0\n\n#Gets the y6+1 ion MZ\n\njulia> getIonMZ(reverse(getResidues(\"PEPTIDE\"))[1:6], UInt8(1))\n703.3144f0\n\n\n\n\n\n","category":"method"},{"location":"#Titus.getIonSeries-Tuple{Vector{Residue}, UInt8}","page":"Home","title":"Titus.getIonSeries","text":"getIonSeries(residues::Vector{Residue}, charge::UInt8; start::Int = 3, modifier::Float32 = PROTON*charge + H2O, isotope::UInt8 = UInt8(0))\n\nGets the m/z's for an ion series as a Vector{Float32}. \n\nInput\n\nresidues::Vector{Residue}: – List of amino acid residues in the peptide ion\ncharge::UInt8 – Charge of the fragment ions\nstart::Int=3  – Index of first ion the the series to compute.\nisotope::UInt8=UInt8(0) – Diference in the number of isotopes from the monoisotopic ion. \n\nOutput\n\nA Vector{Float32} wich each m/z in the ion series\n\nNotes\n\nThe modifier argument ought to depend on the kind of ion. For a 'b' ion series PROTON*charge is appropriate,\n\nbut for a 'y' ion series, PROTON*charge + H2O would be appropriate. \n\nWill not allow the index of the ion to be equal to or less than the charge. For example,\n\nb2+2 ions could only be calculated in error and are therefore excluded even if start  is set to 2. \n\nIf start exceeds length(residues)-1, then only the N-1 ion is calculated, that is,\n\nthe highest mass ion in the series. \n\nExamples\n\n#Gets the y3+2 through y6+2 ions\n\njulia> getIonSeries(reverse(getResidues(\"PEPTIDE\")), UInt8(2), start = 3)\n4-element view(::Vector{Float32}, 3:6) with eltype Float32:\n 188.58934\n 239.11317\n 287.63956\n 352.16086\n\n#Gets the b4+2 through b6+2 ions\n\njulia> getIonSeries(getResidues(\"PEPTIDE\"), UInt8(2), start = 4, modifier = PROTON*UInt8(2))\n3-element view(::Vector{Float32}, 4:6) with eltype Float32:\n 213.10518\n 269.6472\n 327.16064\n\n\n\n\n\n","category":"method"},{"location":"#Titus.getPrecursors-Tuple{Vector{Residue}}","page":"Home","title":"Titus.getPrecursors","text":"getPrecursors(residues::Vector{Residue}; charges::Vector{UInt8} = UInt8[1,2],isotopes::Vector{UInt8}=UInt8[0],pep_id::UInt32=UInt32(0)) \n\nAlternate constructor for the Precursor struct that Can accept a string representation of a peptide\n\nInput\n\nOutput\n\nNotes\n\n(link to getResidues())\n\n\n\n\n\n","category":"method"},{"location":"#Titus.getYIonModifier-Tuple{UInt8}","page":"Home","title":"Titus.getYIonModifier","text":"getYIonModifier(charge::UInt8)\n\nMass modification that needs to be added to y-ions\n\n\n\n\n\n","category":"method"}]
}
