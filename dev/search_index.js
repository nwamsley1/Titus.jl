var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Titus","category":"page"},{"location":"#Titus","page":"Home","title":"Titus","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Titus.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Titus]","category":"page"},{"location":"#Titus.Mod-Tuple{String, Dict{String, Float32}}","page":"Home","title":"Titus.Mod","text":"Mod(mod::String, mods_dict::Dict{String, Float32})\n\nGiven a string, first parse by the regular expression       Examples: \"K\", \"K[+8.014199]\" or \"C[Carb]\"\n\nIn the second case, \"K[+8.014199]\", \"K[+8.014199]\" is the modification name     and 8.014199 is the modification mass. \n\nIn the second case, \"C[Carb]\" is the modification name     and \"Carb\" is a key to the dictionary \"modsdict\".     modsdict[\"Carb\"] returns the modification mass. \n\nIf the Mod string can't be parsed, returns an error. \n\n\n\n\n\n","category":"method"},{"location":"#Titus.Precursor","page":"Home","title":"Titus.Precursor","text":"Precursor(residues::Array{Residue, 1}, charge::Int32, isotope::Int32 = Int32(0), prec_id::Int32 = Int32(0), pep_id::Int32 = Int32(0))\n\nConstructor for the Precursor struct. Given a list of amino acid residues, a charge, and an isotope state, makes a precursor object with the correct mz.  (link to PrecursorMZ)\n\n\n\n\n\n","category":"type"},{"location":"#Titus.Precursor-2","page":"Home","title":"Titus.Precursor","text":"Precursor(sequence::String, mods_dict::Dict{String, Float32}, charge::Int32, isotope::Int32 = Int32(0), prec_id::Int32 = Int32(0), pep_id::Int32 = Int32(0))\n\nAlternate constructor for the Precursor struct. Can accept a string representation of a peptide and a mods_dict  and convert to residues Array{Residue, 1}.  (link to getResidues())\n\n\n\n\n\n","category":"type"},{"location":"#Titus.Transition-Tuple{String, Float32, Char, UInt8}","page":"Home","title":"Titus.Transition","text":"Transition(sequence::String, mods_dict::Dict{String, Float32}, precursor::Precursor, ion_type::Char, charge::Int32, isotope::Int32 = Int32(0),  prec_id::Int32 = Int32(0))\n\nConstructor for the Transition struct. Accepts a sequence string and mods_dict as objects. Can get the residues array from these using getResidues.  (link to getResidues)\n\n\n\n\n\n","category":"method"},{"location":"#Titus.Transition-Tuple{Vector{Residue}, Float32, Char, UInt8}","page":"Home","title":"Titus.Transition","text":"Transition(residues::Array{Residue, 1}, prec_mz::Float32, ion_type::Char, charge::Int32, ind::Int32, isotope::Int32 = Int32(0), prec_id::Int32 = Int32(0))\n\nConstructor for the Transition struct. Given a list of amino acids, the precursor mz, ion type (b, y, etc.), charge, fragment position, isotope, and precursor id, returns a Transition with the correct fragment mz.   (link to other usages)\n\n\n\n\n\n","category":"method"},{"location":"#Titus.getAllIonMZ-Tuple{Vector{Residue}, UInt8}","page":"Home","title":"Titus.getAllIonMZ","text":"getFragIons(residues::Array{Residue, 1}, prec_mz::Float32, prec_id::Int32, modifier::Float32, ion_type::Char, start::Int32, charge::Int32, isotope::Int32)\n\nReturns an Array{Transition, 1}. For the specific ion type and charge state (yn+2 for example) gets all fragment ions from start to the end. \n\n\n\n\n\n","category":"method"},{"location":"#Titus.getIonMZ-Tuple{Vector{Residue}, UInt8}","page":"Home","title":"Titus.getIonMZ","text":"getIonMZ(residues::Array{Residue, 1}, charge::Int32; modifier::Float32 = PROTON*charge + H2O, isotope::Int32 = Int32(0))\n\nGet the mz ratio of an ion given a list of the amino acid residues, the charge,  the isotope state, and modifier. \n\nThe modifier should depend on the kind of ion (y, b, precursor etc.).  The default value PROTON*charge + H2O is correct for precursors and y ions. For b ions, PROTON*charge  should be used instead. \n\nThe isotope state is the difference in the number of isotopes from the monoisotopic state. For a monoisotopic precurosr, isotope should equal the default value of zero. \n\n\n\n\n\n","category":"method"}]
}
