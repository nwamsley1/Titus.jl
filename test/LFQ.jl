function Tol(a, b, ppm = 2)
    abs(a-b)<=(ppm*minimum((a, b))/1000000)
end

@testset "LFQ.jl" begin
    prot = DataFrame(Dict(
        :peptides => ["A","A","A","B","B","B","C","C","C","D","D","D"],
        :protein => append!(split(repeat("A",9), ""), ["B","B","B"]),
        :file_idx => UInt32[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
        :abundance => [10, 20, 40, 1, 2, 4, 100, 200, missing, 1000, 2000, 3000],
    ))

    function testLFQ(prot)
        out = Dict(
            :protein => String[],
            :peptides => String[],
            :log2_abundance => Float64[],
            :experiments => UInt32[],
        )

        for (protein, data) in pairs(groupby(prot, :protein))
            getProtAbundance(string(protein[:protein]), 
                                collect(data[!,:peptides]), 
                                collect(data[!,:file_idx]), 
                                collect(data[!,:abundance]),
                                out[:protein],
                                out[:peptides],
                                out[:experiments],
                                out[:log2_abundance]
                            )
        end
        out
    end
    out = testLFQ(prot)

    @test Tol(out[:log2_abundance][4], log2(1000))
    @test Tol(out[:log2_abundance][2] - out[:log2_abundance][1], 1.0)
    @test Tol(out[:log2_abundance][3] - out[:log2_abundance][2], 1.0)
    @test Tol(out[:log2_abundance][5] - out[:log2_abundance][4], log2(2000.0/1000.0))
    @test Tol(out[:log2_abundance][6] - out[:log2_abundance][5], log2(3000.0/2000.0))

    prot = DataFrame(Dict(
        :peptides => ["A","A","A","B","B","B","C","C","C","D","D","D"],
        :protein => append!(split(repeat("A",9), ""), ["B","B","B"]),
        :file_idx => UInt32[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
        :abundance => [100, 200, 400, 100, 200, 400, 100, 200, 400, missing, missing, missing],
    ))
    out = testLFQ(prot)
    @test Tol(out[:log2_abundance][1], log2(100))
    @test Tol(out[:log2_abundance][2], log2(200))
    @test Tol(out[:log2_abundance][3], log2(400))
    [@test isnan(out[:log2_abundance][i]) for i in 4:6]


    #Are the ratios still correct when we add missing values? Are zeros handeled as missing?
    prot = DataFrame(Dict(
        :peptides => ["A","A","A","B","B","B","C","C","C","D","D","D"],
        :protein => append!(split(repeat("A",9), ""), ["B","B","B"]),
        :file_idx => UInt32[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
        :abundance => [100, 200, missing, 100, 200, 400, 100, missing, missing, missing, missing, missing],
    ))
    out = testLFQ(prot)
    @test Tol(out[:log2_abundance][2] - out[:log2_abundance][1], 1.0)
    @test Tol(out[:log2_abundance][3] - out[:log2_abundance][2], 1.0)


    #Are zeros handeled as missing?
    prot = DataFrame(Dict(
        :peptides => ["A","A","A","B","B","B","C","C","C","D","D","D"],
        :protein => append!(split(repeat("A",9), ""), ["B","B","B"]),
        :file_idx => UInt32[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
        :abundance => [100, 200, 0.0, 100, 200, 400, 100, missing, missing, missing, missing, missing],
    ))
    out = testLFQ(prot)
    @test Tol(out[:log2_abundance][2] - out[:log2_abundance][1], 1.0)
    @test Tol(out[:log2_abundance][3] - out[:log2_abundance][2], 1.0)
    [@test isnan(out[:log2_abundance][i]) for i in 4:6]

    #Make sure there are not errors on real world data. 
    peptides
    file_idx = UInt32[0x00000004, 0x00000003, 0x00000001, 0x0000002d, 0x00000002, 0x0000006f, 0x0000000a, 0x00000070, 0x00000073, 0x0000006a, 0x0000001b, 0x00000067, 0x0000006e, 0x00000055, 0x00000008, 0x00000056, 0x00000027, 0x0000006b, 0x00000069, 0x0000000d, 0x00000072, 0x00000007, 0x0000000e, 0x00000028, 0x00000006, 0x0000002a, 0x0000003d, 0x00000074, 0x00000031, 0x0000006c, 0x0000006d, 0x00000071, 0x0000000b, 0x00000009, 0x00000018, 0x0000002c, 0x00000041, 0x0000002e, 0x0000001c, 0x00000068, 0x00000066, 0x0000001d, 0x00000050, 0x00000023, 0x00000017, 0x0000004e, 0x00000054, 0x00000037, 0x00000025, 0x0000004b, 0x0000004d, 0x00000044, 0x0000004f, 0x00000034, 0x00000059, 0x00000024, 0x0000003b, 0x00000021, 0x00000060, 0x00000035, 0x0000002f, 0x00000058, 0x0000001e, 0x00000038, 0x0000003a, 0x00000040, 0x00000011, 0x00000042, 0x0000003e, 0x00000051, 0x00000020, 0x0000001a, 0x00000043, 0x00000039, 0x00000047, 0x00000032, 0x00000045, 0x00000014, 0x00000012, 0x0000003f, 0x0000000f, 0x00000057, 0x00000026, 0x00000046, 0x0000003c, 0x00000061, 0x00000022, 0x00000010, 0x00000001, 0x00000002, 0x00000004, 0x00000072, 0x00000070, 0x0000000d, 0x00000069, 0x00000008, 0x0000006c, 0x00000073, 0x0000001b, 0x00000056, 0x00000027, 0x0000006e, 0x00000067, 0x0000006b, 0x0000002a, 0x00000007, 0x0000000e, 0x00000021, 0x00000026, 0x0000001a, 0x0000001d, 0x0000000a, 0x00000005, 0x00000022, 0x00000003, 0x00000001, 0x00000020, 0x0000000c, 0x0000000f, 0x00000008, 0x0000001e, 0x00000006, 0x0000000d, 0x00000059, 0x00000018, 0x0000001c, 0x0000000e, 0x0000005b, 0x0000000b, 0x00000007, 0x00000050, 0x0000005e, 0x0000004f, 0x0000005f, 0x00000068, 0x00000053, 0x00000004, 0x00000002, 0x00000067, 0x00000009, 0x0000005d, 0x00000038, 0x00000066, 0x0000004e, 0x00000041, 0x00000040, 0x00000037, 0x00000036, 0x00000013, 0x00000021, 0x00000011, 0x00000072, 0x0000002b, 0x0000001b, 0x0000006f, 0x0000006c, 0x00000026, 0x0000002c, 0x0000001a, 0x00000070, 0x00000069, 0x00000001, 0x00000020, 0x00000027, 0x0000000a, 0x00000005, 0x00000073, 0x0000000c, 0x00000022, 0x0000001e, 0x0000000d, 0x0000002d, 0x00000006, 0x00000032, 0x0000000e, 0x00000010, 0x0000002f, 0x00000008, 0x00000035, 0x00000012, 0x0000006b, 0x00000062, 0x00000018, 0x0000001c, 0x00000071, 0x0000005b, 0x0000002a, 0x00000059, 0x00000016, 0x00000050, 0x00000007, 0x0000004f, 0x00000009, 0x0000000b, 0x00000074, 0x00000002, 0x0000004c, 0x00000061, 0x0000005e, 0x0000000f, 0x0000005f, 0x00000024, 0x0000005c, 0x00000068, 0x0000006d, 0x0000004d, 0x00000056, 0x00000053, 0x00000004, 0x0000006a, 0x00000028, 0x00000058, 0x00000057, 0x00000067, 0x0000005a, 0x0000005d, 0x00000055, 0x00000054, 0x00000066, 0x0000004e, 0x00000038, 0x00000047, 0x00000040, 0x0000003b, 0x00000043, 0x00000041, 0x00000044, 0x0000003e, 0x00000046, 0x00000037, 0x0000003d, 0x00000015, 0x0000003a, 0x00000045, 0x00000042, 0x0000003f, 0x0000003c, 0x00000039, 0x00000036]
    abundances = Union{Missing, Float64}[0.011951871275857867, 0.011769397762979783, 0.013313521944578029, 0.0074675960153268725, 0.010616194561344619, 0.006923611141732768, 0.010712035860326876, 0.0057321099491519315, 0.012113379564846281, 0.007312066009107361, 0.01619904909335517, 0.03333658982810169, 0.005099754361773344, 0.008291251270807772, 0.010661149955046875, 0.008297931828123504, 0.009915757511814205, 0.006686580397017526, 0.0055560786805266184, 0.007720303138224179, 0.006157030243115513, 0.009242731514623133, 0.009772148840101228, 0.008115878418471584, 0.00827661702727147, 0.004170668388362118, 0.01371907209560545, 0.007180241873156676, 0.0033246291948253195, 0.0051386136437107655, 0.004567273462974889, 0.006914345859255215, 0.012280780427629034, 0.011864122317026413, 0.007645723236487068, 0.006092980077165728, 0.012435483023644518, 0.004955952728535086, 0.011300865638697115, 0.03122409976864047, 0.032974666161905725, 0.010104705227832224, 0.01650287586353982, 0.012743408998536623, 0.004732546605712876, 0.01686223077934574, 0.008313851099311407, 0.009178166191400293, 0.011370471654582059, 0.006822058860868719, 0.005553037624828322, 0.01292164284986715, 0.01380171182761868, 0.005822716267660753, 0.0119595997945134, 0.01664436396875496, 0.010050850442023872, 0.019292474976349446, 0.00594953747430883, 0.006260939351903135, 0.006708887163888942, 0.016857081980984043, 0.016370809607694606, 0.013933896224325407, 0.01596008873922325, 0.016224073160288028, 0.006631886714192742, 0.009544171573688793, 0.014546462142546242, 0.008223329802528705, 0.01761534584842746, 0.01667821938744793, 0.009807941110787895, 0.010191541634303058, 0.016924646300498728, 0.0047183860941959225, 0.013938779916290818, 0.005486899887779829, 0.00533641934744737, 0.012751734253568098, 0.014350678544311084, 0.013990123940813483, 0.01558717102000734, 0.012932606460299628, 0.012848845728379328, 0.0074704201332055535, 0.02589840191918266, 0.010436787524824315, 0.011778304029786274, 0.011633305485971596, 0.012875229454202138, 0.013128923604450046, 0.008537569339003289, 0.012880619235707389, 0.007363164873934908, 0.02096762153517345, 0.008830273729350347, 0.012742569281376903, 0.01792131989607267, 0.007929629072323831, 0.007206584494094467, 0.007348342539964836, 0.037793143498135215, 0.00938357371269088, 0.00583932642461641, 0.013401091821766895, 0.014753279412904155, 0.009039499666149413, 0.004607474491940576, 0.004578651285063369, 0.006859558457859217, 0.022926370178327087, 0.012406680464107388, 0.008775850801946074, 0.021879944028628365, 0.007041421329571209, 0.012691478728204182, 0.026439729689171083, 0.0024132969523146097, 0.025402325105309126, 0.004811374047178945, 0.011360223300508008, 0.01385821316785334, 0.011738362137327924, 0.0037919737801948637, 0.003949554382368226, 0.022377240853770942, 0.005884640114577046, 0.0198505528093642, 0.015188616345679078, 0.01173661181224736, 0.007361582037840165, 0.011882874474480516, 0.005662062005615807, 0.025785068315858573, 0.004153065254032595, 0.017136437697568237, 0.016804615858037848, 0.03241066975099969, 0.02513957361064686, 0.01273739597141132, 0.015745518174126394, 0.038065251841967906, 0.013947684893545576, 0.01294166310481988, 0.008981099548567479, 0.014482408262576905, 0.015018864671211314, 0.005029780851056777, 0.014416257594619866, 0.004697025970570983, 0.0042174135282395005, 0.0060122274144326, 0.00707735027063882, 0.003557259519391242, 0.0029821947059825867, 0.010987941754937516, 0.004427696377035086, 0.010947723442381242, 0.003751396067200009, 0.0033907149206621034, 0.0055930487090009575, 0.012219061520235552, 0.004326329439659554, 0.011186746189834184, 0.007583518519270649, 0.005647867360418919, 0.009908349133536378, 0.014493561163027474, 0.009471711653079976, 0.010809249289364666, 0.004963174792613329, 0.00853489097223635, 0.0029959844615040365, 0.01109213601091957, 0.004763870946039881, 0.004198621332515669, 0.012016141884385215, 0.004185071057292634, 0.0041251010209097765, 0.003827630493189222, 0.0022849028826875577, 0.004620492819074261, 0.008496384073151512, 0.00396164872814028, 0.006329367339422042, 0.0030509978494207375, 0.011099300829571192, 0.0021809621900324883, 0.012244420807224397, 0.009076569716666424, 0.013709419528529146, 0.015408870735223392, 0.012835374165494485, 0.005247200536234022, 0.008744192250357347, 0.0030973991247757408, 0.001639506181216041, 0.010116484219476028, 0.004713852443829606, 0.013628815808948069, 0.008738388226338814, 0.005464832103222892, 0.026554482010173488, 0.0026510771879921183, 0.0035667683537336185, 0.0048752639394597725, 0.004182717935727578, 0.009495887340471161, 0.0028250391466700104, 0.004008570210280517, 0.010604000899694785, 0.010031959725514943, 0.028849315504951935, 0.007233062999747881, 0.014079889039573199, 0.006400932307564794, 0.007433932053193393, 0.020635234559606704, 0.011826065949148942, 0.00319343137943539, 0.008243786057708855, 0.007778613318414728, 0.004977021012103163, 0.005082080338218885, 0.005439805594106901, 0.0063156331448549425, 0.0072969832908537, 0.0063543679906342765, 0.0025847127905712134, 0.006417827424305745, 0.0022175425987654316, 0.0052372956367857885, 0.0057518893875288055, 0.006068518850772231, 0.009718013174315374, 0.006988428557943146, 0.0062309057445682344, 0.003468527279455185]
    prot = DataFrame(Dict(
        :peptide => peptides,
        :protein => ["A" for x in 1:length(peptides)],
        :file_idx => file_idx,
        :abundance => abundances
    ))
    out = Dict(
        :protein => String[],
        :peptides => String[],
        :log2_abundance => Float64[],
        :experiments => UInt32[],
    )
    for (protein, data) in pairs(groupby(prot, :protein))
        getProtAbundance(string(protein[:protein]), 
        collect(data[!,:peptide]), 
        collect(data[!,:file_idx]), 
        (collect(data[!,:abundance])),
                            out[:protein],
                            out[:peptides],
                            out[:experiments],
                            out[:log2_abundance]
                        )
        #println(protein[:parent])
    end
#=

for (protein, data) in pairs(groupby(quant, :protein_names))
    #println("CCNA2" ∈ protein)
    if "CCNA2" ∈ protein
        println(data[!,:sequence])
        println(data[!,:ms_file_idx])
        println(data[!,:par])
    end
end

out = DataFrame(out)

prot[prot.file_idx .== 6,:]
prot[prot.file_idx .== 5,:]
prot[prot.file_idx .== 4,:]
prot[prot.file_idx .== 21,:]

out[out.experiments.==6,:]
out[out.experiments.==4,:]
out[out.experiments.==5,:]
out[out.experiments.==21,:]

-8.041 - -6.22144
log2(0.00949589/0.00221754)

0.00758352/0.00949589 #0.7986107673951572
0.0124067/0.0171364 #0.7239968721551785
2^(-6.40569 - -6.22144) #0.8801064895153811


0.00827662/.0119519 #0.6924940804390934
0.0113602/0.0171364 #0.6629280362269789
0.00853489/0.00949589 #0.8987983222215085
2^(-6.53885  - -6.22144) #0.8025092909144206

julia> prot[prot.file_idx .== 5,:]
2×4 DataFrame
 Row │ abundance   file_idx  peptide           protein 
     │ Float64?    UInt32    String            String  
─────┼─────────────────────────────────────────────────
   1 │ 0.0124067          5  LQNETLHLAVNYIDR   A
   2 │ 0.00758352         5  EDALAFNSAISLPGPR  A

julia> prot[prot.file_idx .== 4,:]
4×4 DataFrame
 Row │ abundance   file_idx  peptide           protein 
     │ Float64?    UInt32    String            String  
─────┼─────────────────────────────────────────────────
   1 │ 0.0119519          4  APQHAQQSIR        A
   2 │ 0.0128752          4  AAPVQQPR          A
   3 │ 0.0171364          4  LQNETLHLAVNYIDR   A
   4 │ 0.00949589         4  EDALAFNSAISLPGPR  A


for pep in unique(prot.peptide)
    println(mean(prot[prot.peptide.==pep,:][!,:abundance]))
end
=#
end